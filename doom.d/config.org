#+TITLE: Config
#+PROPERTY: header-args:emacs-lisp :tangle yes

* UI
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "FiraCode Nerd Font Mono" :size 18))
(setq doom-theme 'doom-one)
(setq doom-modeline-height 30     ;; sets modeline height
      doom-modeline-bar-width 5   ;; sets right bar width
      doom-modeline-persp-name t  ;; adds perspective name to modeline
      doom-modeline-persp-icon t) ;; adds folder icon next to persp name
(add-hook! 'emacs-startup-hook #'toggle-frame-fullscreen)
#+end_src
* Edit
** Indent
#+begin_src emacs-lisp
(setq-default tab-width 2)
#+end_src
** Global Auto Revert
#+begin_src emacs-lisp
(global-auto-revert-mode 1)
(setq global-auto-revert-non-file-buffers t)
#+end_src
* Browser
** WSL
#+begin_src emacs-lisp :tangle no
;; Setting wsl default browser.
(when (and (eq system-type 'gnu/linux)
           (string-match
            "Linux.*Microsoft.*Linux"
            (shell-command-to-string "uname -a")))
  (setq
   browse-url-generic-program  "/mnt/c/Windows/System32/cmd.exe"
   browse-url-generic-args     '("/c" "start")
   browse-url-browser-function #'browse-url-generic))
#+end_src
* Plugins
** LSP mode
#+begin_src emacs-lisp
(after! lsp-mode
  (advice-remove #'lsp #'+lsp-dont-prompt-to-install-servers-maybe-a))
#+end_src
*** LSP haskell
#+begin_src emacs-lisp
(after! haskell
  (setq
   lsp-haskell-check-project nil
   lsp-haskell-plugin-ghcide-completions-config-snippets-on nil
   lsp-haskell-max-completions 20))
#+end_src
** Evil
#+begin_src emacs-lisp
(setq evil-escape-key-sequence "kj")
#+end_src
** Company
#+begin_src emacs-lisp
(after! company
  (setq
   company-transformers '(company-sort-by-occurrence company-sort-prefer-same-case-prefix)
   company-idle-delay 0.2
   company-minimum-prefix-length 2
   company-selection-wrap-around t)
  (map! (:when (featurep! :completion company)
         (:after company
          (:map company-active-map
           "C-SPC" #'company-complete-common-or-cycle
           "TAB"   #'company-complete-selection
           [tab]   #'company-complete-selection)))))
#+end_src
** Good scroll
#+begin_src emacs-lisp
(defun good-scroll-up-half-screen ()
  (interactive)
  (good-scroll-move (/ (good-scroll--window-usable-height) 2)))
(defun good-scroll-down-half-screen ()
  (interactive)
  (good-scroll-move (- (/ (good-scroll--window-usable-height) 2))))
(use-package! good-scroll
  :after evil
  :config
  (good-scroll-mode 1)
  (evil-define-key nil evil-motion-state-map (kbd "C-d") #'good-scroll-up-half-screen)
  (evil-define-key nil evil-motion-state-map (kbd "C-u") #'good-scroll-down-half-screen)
  (evil-define-key nil evil-motion-state-map (kbd "C-e") #'good-scroll-up)
  (evil-define-key nil evil-motion-state-map (kbd "C-y") #'good-scroll-down)
  (evil-define-key nil evil-motion-state-map (kbd "C-f") #'good-scroll-up-full-screen)
  (evil-define-key nil evil-motion-state-map (kbd "C-b") #'good-scroll-down-full-screen)
  (global-set-key [next] #'good-scroll-up-full-screen)
  (global-set-key [prior] #'good-scroll-down-full-screen))
#+end_src
** Emacs Application Framework
#+begin_src emacs-lisp
(use-package! eaf
  :commands (eaf-open eaf-open-browser)
  :load-path "~/.emacs.d/site-lisp/emacs-application-framework"
  :config
  (use-package! eaf-browser
    :load-path "~/.emacs.d/site-lisp/emacs-application-framework/app/eaf-browser")
  (use-package! eaf-evil
    :load-path "~/.emacs.d/site-lisp/emacs-application-framework/extension"))
(setq browse-url-browser-function #'eaf-open-browser)
#+end_src
** Beacon
#+begin_src emacs-lisp
(use-package! beacon
  :config
  (beacon-mode 1))
#+end_src
** Notes
#+begin_src emacs-lisp
(setq org-directory "~/notes")
(setq deft-directory "~/notes")
#+end_src
* Languages
** Haskell
#+begin_src emacs-lisp
(add-hook! haskell-mode
  (setq tab-width 2))
#+end_src

* Hacks
#+begin_src emacs-lisp
(add-hook! 'emacs-startup-hook #'doom-init-ui-h)
#+end_src
